if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.13")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.13")
BIocManager::available()
BiocManager::available()
BiocManager::install(c("affydata", "arrayQualityMeters"))
BiocManager::install(c("arrayQaulityMetrics"))
BiocManager::install(c("arrayQualityMetrics"))
BiocManager::install(c("arrayQualityMetrics"))
force = TRUE
BiocManager::install(c("arrayQualityMetrics")) force = TRUE
force = TRUE
clc
cancel
close
Library <- -c("gapminder","tibble","readr","dplyr","magrittr","tidyr")
Library <- c("gapminder","tibble","readr","dplyr","magrittr","tidyr")
install.packages(Library)
install.packages(c("pillar", "rlang", "xfun"))
cat("x is <=10")
x <- 1
if(x>10) {
cat("x is > 10")
} else {
cat("x is <=10")
}
if(x>10) {
cat("x is > 10")
} else {
cat("x is <=10")
}
x <- 12;
if(x>10) {
cat("x is > 10")
} else {
cat("x is <=10")
}
if(x>10) {
cat("x is > 10")
} else {
cat("x is <=10")
}
if(x>10) {
cat("x is > 10")
} else {
cat("x is <=10")
}
x <- 0
for(i in 1:5){ x <- x+i}
x
x <- 0
i <- 1
while(i<=5){x <- x+i; i <- i+1}
sum(1:10)
rnorm
k <- rnorm(ceiling(1.75*6.54))
k
x = 3
system.time({for (i in 1:length(ll))
system.time({for (i in 1:length(ll)) res2[i] <- f(ll[[i]])
})
system.time({for (i in 1:length(ll)) res2[i] <- f(ll[[i]]) })
system.time({for (i in 1:length(ll)) res2[i] <- f(ll[[i]]) })
res2 <- numeric(length(ll))
system.time({for (i in 1:length(ll)) res2[i] <- f(ll[[i]]) })
N <- 10^4
ll <- lapply (sample(N), rnorm)
f <- function(x) {mean(x) * length(x)}
system.time({for (i in 1:length(ll)) res2[i] <- f(ll[[i]]) })
aver <- avg_gt(x,3)
return average <- mean(x[x>gt])
avg_gt <- function(x, gt){
return average <- mean(x[x>gt])
}
clear
close
clc
x <- runif(100)
aver <- avg_gt(x,0.2)
avg_gt
avg_gt <- function(x, gt){return average <- mean(x[x>gt])}
avg_gt
x <-runif(100)
avg_gt <- function(x, gt){return avg <- mean(x[x>gt])}
return media <- mean(x[x>gt])
return(media <- mean(x[x>gt]))}
return(media <- mean(x[x>gt]))}
avg_gt <- function(x, gt){
return(media <- mean(x[x>gt]))}
return media <- mean(x[x>gt])
avg_gt(x,0.2)
aver
aver <- avg_gt(x,0.2)
aver
cat(aver)
cat(small_matrix(m))
cat(small_matrix(m))
small_matrix <- function(m){
a <- apply(m, MARGIN = 1, min)
}
m = matrix(rnorm(36),nrow=6)
cat(small_matrix(m))
m
small_matrix <- function(m){
a <- apply(m, MARGIN = 2, min)
}
m = matrix(rnorm(36),nrow=6)
cat(small_matrix(m))
m
View(f)
m = matrix(rnorm(5),nrow=5)
m = matrix(rnorm(5),nrow=5)
cat(small_matrix(m))
runif
m = matrix(runif(25),nrow=5)
m
cat(small_matrix(m))
small_matrix2 <- function(m){ for(i:dim(m,2)){a[i] <- min(m, 2 }}
small_matrix2 <- function(m){ for(i:dim(m,2)){a[i] <- min(m, 2) }return(a)}
dim(m)
dim(m,2)
small_matrix2 <- function(m){ for(i:dim(m)[2]){a[i] <- min(m, 2) }return(a)}
dim(m)[2]
small_matrix2 <- function(m){ for(i in 1:dim(m)[2]){a[i] <- min(m, 2) }return(a)}
small_matrix2 <- function(m){ for(i in 1:dim(m)[2]){a[i] <- min(m, 2) }}
small_matrix(m)
a <- small_matrix2(m)
cat(small_matrix2(m))
small_matrix2 <- function(m){ for(i in 1:dim(m)[2]){a <- array();a[i] <- min(m, 2) }}
cat(small_matrix2(m))
cat(small_matrix2(m))
a <- small_matrix2(m)
small_matrix2 <- function(m){ for(i in 1:dim(m)[2]){a <- array();a[i] <- min(m[i]) }}
a <- small_matrix2(m)
small_matrix2 <- function(m){ for(i in 1:dim(m)[2]){a <- array();a[i] <- min(m[i]) }}
m[1]
m[1][1]
m[2]
m
small_matrix2 <- function(m){ for(i in 1:dim(m)[2]){a <- array();a[i] <- min(m[,i]) }}
a <- small_matrix2(m)
min(m[,i])
a <- array()
a[1] <- min(m[,1])
small_matrix2 <- function(m){ for(i in 1:dim(m)[2]){a <- array();a[i] <- min(m[,i]) }return(a)}
small_matrix2 <- function(m){ for(i in 1:dim(m)[2]){a <- array();a[i] <- min(m[,i]) }return(a)}
small_matrix2 <- function(m){ for(i in 1:dim(m)[2]){a <- array();a[i] <- min(m[,i]) }return(a <-a)}
small_matrix2 <- function(m){ for(i in 1:dim(m)[2]){a <- array();a[i] <- min(m[,i]) };return(a )}
a <- small_matrix2(m)
m
library(tibble)
as_tibble(iris)
tibble.as_tibble(iris)
a <- small_matrix2(m)
small_matrix2 <- function(m){ for(i in 1:dim(m)[2]){a <- array();a[i] <- min(m[,i]) };return(a )}
a <- small_matrix2(m)
small_matrix2 <- function(m){ a <- array();for(i in 1:dim(m)[2]){a[i] <- min(m[,i]) };return(a )}
a <- small_matrix2(m)
library(gapminder);gp <- gapminder; gp_df <- as.data.frame(gp)
gp
gp_df
as.factor(gp_df)
as.factor(gp)
a <- as.factor(gp)
a <- as.factor(gp_df)
gp
View(gp)
View(gp)
clear
clc
close
cat("ciao", file= "output.txt")
load("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/DATA/test_text.Rdata")
View(gp)
View(gp)
load("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/DATA/test_text.Rdata")
test
install.packages("RMySQL")
mydb <- dbConnect(MySQL(), user=’genome’,  host='genome-mysql.soe.ucsc.edu') # Connect to the server
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
mydb <- dbConnect(MySQL(), user=’genomep’,  passwor = 'password', host='genome-euro-mysql.soe.ucsc.edu') # Connect to the server
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
mydb <- dbConnect(MySQL(), user='genomep',  password = 'password', host='genome-euro-mysql.soe.ucsc.edu') # Connect to the server
mydb <- dbConnect(MySQL(), user='genomep',  password = 'password', host='genome-euro-mysql.soe.ucsc.edu') # Connect to the server
library(RMySQL)
mydb <- dbConnect(MySQL(), user='genomep',  password = 'password', host='genome-euro-mysql.soe.ucsc.edu') # Connect to the server
mydb <- dbConnect(MySQL(), user='genomep',  password = 'password', host='genome-euro-mysql.soe.ucsc.edu') # Connect to the server
View(mydb)
View(mydb)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
help dbGetQuery()
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
View(ris)
View(ris)
dbGetQuery
dbFetch
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
dbClearResult(ris);
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
View(ris)
View(ris)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
View(ris)
View(ris)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
View(ris)
View(ris)
dbClearResult(ris)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
View(ris)
View(ris)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
View(ris)
View(ris)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
findSNPs(user, password, host, dbName);
dbDisconnect()
dbDisconnect(mydb)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
myDB <- dbConnect(MySQL(), user=user , password = password, host= host, dbname = dbName)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
dbDisconnect(mydb)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
library(RMySQL)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e BIoinformatica/Bioinformatica/Esercizi/quarto.R", echo=TRUE)
if(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(BiocManager)
if(!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ShortRead", version = "3.8")
BiocManager::install("ShortRead", version = "3.14")
library(BiocVersion)
BiocManager::install("ShortRead", version = "3.8")
BiocManager::install(version = '3.14')
detach("package:BiocVersion", unload = TRUE)
BiocManager::install(version = '3.14')
BiocManager::install("ShortRead", version = "3.14")
BiocManager::install("ShortRead", version = "3.14")
force = TRUE
BiocManager::install("ShortRead", version = "3.14", force = TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(ShortRead)
library(GenomicAlignments)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
head(sread(fq), 1)
head(quality(fq), 3)
View(fq1)
View(fq1)
sread(fq)
sread(fq).seq
a = sread(fq)
View(a)
View(a)
head(sread(fq), 1)
head(sread(fq), 2)
a <- head(sread(fq), 1)
View(a)
View(a)
sampler <- FasqSampler(fl, n= 15000)
fq5 <- yield(sampler)
sampler <- FastqSampler(fl, n= 15000)
fq5 <- yield(sampler)
fq5
fq5(1)
fq5[1]
fq5[1,seq]
fq5[1,'seq']
fq5[fq5=='TGTGAAGTGAGA']
fq5.seq
head(sread(fq5), sread(fq5)=="TGTGAAGTGAGA")
sread(fq5)
sread.seq(fq5)
sread(fq5)
View(fq5)
View(fq5)
sread(fq5)=="TGTGAAGTGAGA"
sread
showMethods(sread)
a = sread(fq5)=="TGTGAAGTGAGA"
View(fq5)
View(fq5)
seq(sread(fq5))
a <- seq(sread(fq5))
a <- sread(fq5)
View(a)
View(a)
a
a[1,seq]
sread(fq5)[sread(fq5)=="TGTGAAGTGAGA",seq]
sread(fq5)[,seq]
sread(fq5)[sread(fq5)=="TGTGAAGTGAGA"]
sread(fq5)[sread(fq5)[,2]=="TGTGAAGTGAGA"]
sread(fq5)[sread(fq5)[,seq]=="TGTGAAGTGAGA"]
sread(fq5)[,seq]
sread(fq5)=="TGTGAAGTGAGA"
sread(fq5)[1]
sread(fq5)[sread(fq5)=="TGTGAAGTGAGA"]
a = sread(fq5)=="TGTGAAGTGAGA"
any(a)
all(a)
all(!a)
a = sread(fq5)=="AAAAAAA"
any(a)
delete a
as.data.frame(sread(fq5)[sread(fq5)=="AAAAAAA"])
as.data.frame(sread(fq5)[sread(fq5)=="TGTGAAGTGAGA"])
grep("TGTGAAGTGAGA",as.data.frame(sread(fq5)[,])
)
grep("TGTGAAGTGAGA",as.data.frame(sread(fq5)[,]),$x)
sread(fq5)
fl <- system.file(package="ShortRead", "extdata", "E-MTAB-1147", "ERR127302_1_subset.fastq.gz")
sampler <- FastqSampler(fl, n= 15000)
fq5 <- yield(sampler)
a = sread(fq5)=="TGTGAAGTGAGA"
any(a)
sread(fq5)
sread(fq5)[TGTGAAGTGAGA]
sread(fq5)[sread(fq5) == "TGTGAAGTGAGA"]
as.data.frame(sread(fq5)[sread(fq5) == "TGTGAAGTGAGA"])
as.data.frame(sread(fq5)[grep("TGTGAAGTGAGA",sread(fq5)[,seq],perl = TRUE, value = FALSE)])
grep("TGTGAAGTGAGA",sread(fq5)[,seq],perl = TRUE, value = FALSE)
sread(fq5)[,seq]
as.data.frame(sread(fq5)[,seq])
grep("TGTGAAGTGAGA",as.data.frame(sread(fq5)[,seq]),perl = TRUE, value = FALSE)
grep("T",as.data.frame(sread(fq5)[,seq]), perl = TRUE, value = FALSE)
grep("T",as.data.frame(sread(fq5)[,seq])$x, perl = TRUE, value = FALSE)
grep("T",as.data.frame(sread(fq5)[,seq])$x, perl = TRUE, value = FALSE)
grep("TGTGAAGTGAGA",as.data.frame(sread(fq5)[,seq])$x,perl = TRUE, value = FALSE)
grep("TGTGAAGTGAGA",as.data.frame(sread(fq5)[,])$x,perl = TRUE, value = FALSE)
as.data.frame(sread(fq5)[,])
as.data.frame(sread(fq5)[,])$x
grep("TGTGAAGTGAGA",as.data.frame(sread(fq5)[,])$x)
grep("AAAAAAA",as.data.frame(sread(fq5)[,])$x)
as.data.frame(sread(fq5)[grep("AAAAAAA",as.data.frame(sread(fq5)[,])$x)])
source("~/.active-rstudio-document", echo=TRUE)
grep("TGTGAAGTGAGA",as.data.frame(sread(fq5)[,])$x)
grep("AAAAA",as.data.frame(sread(fq5)[,])$x)
selectID <- grep("AAAAA",as.data.frame(sread(fq5)[,])$x)
selectID <- grep("AAAAA",as.data.frame(sread(fq)[,])$x)
selectID <- grep("AAAAA",as.data.frame(sread(fq5)[,])$x)
sread(fq5[selectID,])
quality(fq5[selectID,])
id(fq5[selectID,])
library(BiocManager)
BiocManager::install("SummarizedExperiment")
t.test(1:10, 20:100)
t.test(1:10, 1:2:14)
library(readxl)
DATABASE_DEFINITIVO_1_ <- read_excel("C:/Users/Alessandro Biscontin/Desktop/DATABASE DEFINITIVO (1).xlsx",
sheet = "Database S e AR", col_types = c("text",
"text", "text", "numeric", "numeric",
"skip", "text", "text", "numeric",
"text", "numeric", "text", "text",
"text", "text", "text", "text", "text",
"numeric", "text", "text", "text",
"text", "text", "text", "text", "text",
"numeric", "text", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "text", "numeric", "numeric",
"numeric", "text", "numeric", "numeric",
"numeric", "text", "text", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"text", "numeric", "numeric", "numeric",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "text",
"text", "numeric", "numeric", "numeric",
"numeric", "text", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"text", "text", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"numeric", "numeric", "text", "text"))
View(DATABASE_DEFINITIVO_1_)
View(DATABASE_DEFINITIVO_1_)
DATABASE_DEFINITIVO_1_.NOME
DATABASE_DEFINITIVO_1
DATABASE_DEFINITIVO_1_
DATABASE_DEFINITIVO_1_(NOME)
DATABASE_DEFINITIVO_1_.NOME
DATABASE_DEFINITIVO_1_[NOME]
DATABASE_DEFINITIVO_1_('COGNOME')
NOME
DATABASE_DEFINITIVO_1_[,1]
DATABASE_DEFINITIVO_1_[,NOME]
DATABASE_DEFINITIVO_1_[NOME,]
DATABASE_DEFINITIVO_1_[,'NOME']
H = "H"
E = "E"
L = "L"
O = "O"
W = "W"
R = "R"
D = "D"
HELLO = paste (H,E,L,L,O, sep = "")
WORLD = paste (W,O,R,L,D, sep = "")
HELLOWORLD(HELLO,WORLD)
HELLOWORLD = paste(HELLO,WORLD)
HELLOWORLD
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e Bioinformatica/Bioinformatica/Project/project.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e Bioinformatica/Bioinformatica/Project/project.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e Bioinformatica/Bioinformatica/Project/project.R", echo=TRUE)
source("C:/Users/Alessandro Biscontin/Desktop/Genetica e Bioinformatica/Bioinformatica/Project/project.R", echo=TRUE)
View(tibbles)
View(tibbles)
